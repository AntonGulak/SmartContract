/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface UniswapAdapterInterface extends utils.Interface {
  functions: {
    "FACTORY_ADDRESS()": FunctionFragment;
    "ROUTER_ADDRESS()": FunctionFragment;
    "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)": FunctionFragment;
    "createPair(address,address)": FunctionFragment;
    "getPrice(uint256,address,address)": FunctionFragment;
    "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)": FunctionFragment;
    "swap(uint256,uint256,address,address,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "FACTORY_ADDRESS"
      | "ROUTER_ADDRESS"
      | "addLiquidity"
      | "createPair"
      | "getPrice"
      | "removeLiquidity"
      | "swap"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "FACTORY_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROUTER_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createPair",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [BigNumberish, BigNumberish, string, string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "FACTORY_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROUTER_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createPair", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;

  events: {};
}

export interface UniswapAdapter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: UniswapAdapterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    FACTORY_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    ROUTER_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    addLiquidity(
      _tokenA: string,
      _tokenB: string,
      _amountADesired: BigNumberish,
      _amountBDesired: BigNumberish,
      _amountAMin: BigNumberish,
      _amountBMin: BigNumberish,
      _to: string,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createPair(
      _tokenA: string,
      _tokenB: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getPrice(
      _amountOut: BigNumberish,
      _tokenA: string,
      _tokenB: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { price: BigNumber }>;

    removeLiquidity(
      _tokenA: string,
      _tokenB: string,
      _liquidity: BigNumberish,
      _amountAMin: BigNumberish,
      _amountBMin: BigNumberish,
      _to: string,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swap(
      _amountIn: BigNumberish,
      _amountOutMin: BigNumberish,
      _tokenA: string,
      _tokenB: string,
      _to: string,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  FACTORY_ADDRESS(overrides?: CallOverrides): Promise<string>;

  ROUTER_ADDRESS(overrides?: CallOverrides): Promise<string>;

  addLiquidity(
    _tokenA: string,
    _tokenB: string,
    _amountADesired: BigNumberish,
    _amountBDesired: BigNumberish,
    _amountAMin: BigNumberish,
    _amountBMin: BigNumberish,
    _to: string,
    _deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createPair(
    _tokenA: string,
    _tokenB: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getPrice(
    _amountOut: BigNumberish,
    _tokenA: string,
    _tokenB: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  removeLiquidity(
    _tokenA: string,
    _tokenB: string,
    _liquidity: BigNumberish,
    _amountAMin: BigNumberish,
    _amountBMin: BigNumberish,
    _to: string,
    _deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swap(
    _amountIn: BigNumberish,
    _amountOutMin: BigNumberish,
    _tokenA: string,
    _tokenB: string,
    _to: string,
    _deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    FACTORY_ADDRESS(overrides?: CallOverrides): Promise<string>;

    ROUTER_ADDRESS(overrides?: CallOverrides): Promise<string>;

    addLiquidity(
      _tokenA: string,
      _tokenB: string,
      _amountADesired: BigNumberish,
      _amountBDesired: BigNumberish,
      _amountAMin: BigNumberish,
      _amountBMin: BigNumberish,
      _to: string,
      _deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createPair(
      _tokenA: string,
      _tokenB: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getPrice(
      _amountOut: BigNumberish,
      _tokenA: string,
      _tokenB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeLiquidity(
      _tokenA: string,
      _tokenB: string,
      _liquidity: BigNumberish,
      _amountAMin: BigNumberish,
      _amountBMin: BigNumberish,
      _to: string,
      _deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    swap(
      _amountIn: BigNumberish,
      _amountOutMin: BigNumberish,
      _tokenA: string,
      _tokenB: string,
      _to: string,
      _deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    FACTORY_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    ROUTER_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    addLiquidity(
      _tokenA: string,
      _tokenB: string,
      _amountADesired: BigNumberish,
      _amountBDesired: BigNumberish,
      _amountAMin: BigNumberish,
      _amountBMin: BigNumberish,
      _to: string,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createPair(
      _tokenA: string,
      _tokenB: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getPrice(
      _amountOut: BigNumberish,
      _tokenA: string,
      _tokenB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeLiquidity(
      _tokenA: string,
      _tokenB: string,
      _liquidity: BigNumberish,
      _amountAMin: BigNumberish,
      _amountBMin: BigNumberish,
      _to: string,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swap(
      _amountIn: BigNumberish,
      _amountOutMin: BigNumberish,
      _tokenA: string,
      _tokenB: string,
      _to: string,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    FACTORY_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ROUTER_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addLiquidity(
      _tokenA: string,
      _tokenB: string,
      _amountADesired: BigNumberish,
      _amountBDesired: BigNumberish,
      _amountAMin: BigNumberish,
      _amountBMin: BigNumberish,
      _to: string,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createPair(
      _tokenA: string,
      _tokenB: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getPrice(
      _amountOut: BigNumberish,
      _tokenA: string,
      _tokenB: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeLiquidity(
      _tokenA: string,
      _tokenB: string,
      _liquidity: BigNumberish,
      _amountAMin: BigNumberish,
      _amountBMin: BigNumberish,
      _to: string,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swap(
      _amountIn: BigNumberish,
      _amountOutMin: BigNumberish,
      _tokenA: string,
      _tokenB: string,
      _to: string,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
